const fs = require('fs');

// Lecture du fichier JSON
const rawData = fs.readFileSync('public/504606b0bc67caad.json', 'utf8');

// Test de d√©tection des synth√®ses strat√©giques
const sections = rawData.split(/### Analyse par :/);

console.log('üîç Test de d√©tection des synth√®ses strat√©giques:');
console.log('- Nombre de sections trouv√©es:', sections.length - 1);

for (let i = 1; i < Math.min(sections.length, 4); i++) {
  const section = sections[i];
  const llmMatch = section.match(/^([^\n*]+)/);
  const llmName = llmMatch ? llmMatch[1].trim() : 'LLM inconnu';
  
  console.log(`\nüìä Section ${i} (${llmName}):`);
  
  // Test avec la regex corrig√©e - inclut la ligne de tirets
  const strategicMatch = section.match(/\*\*Synth√®se Strat√©gique & Recommandations LLMO\s*:\*\*\n-+\n([\s\S]*?)(?=----+|$)/);
  if (strategicMatch) {
    const content = strategicMatch[1];
    console.log('  ‚úÖ Synth√®se strat√©gique trouv√©e');
    console.log('  üîç Longueur du contenu:', content.length);
    console.log('  üîç D√©but du contenu:', content.substring(0, 100) + '...');
    
    // Test synth√®se globale avec le format exact
    const globalMatch = content.match(/\*\*Synth√®se Strat√©gique Globale\*\*([\s\S]*?)(?=---\n|\*\*Recommandations|### Quick Wins|$)/);
    if (globalMatch) {
      console.log('  üìÑ Synth√®se globale: Pr√©sente (' + globalMatch[1].trim().substring(0, 80) + '...)');
    } else {
      console.log('  üìÑ Synth√®se globale: Absente');
      // Debug pour voir si on trouve "Synth√®se Strat√©gique Globale"
      if (content.includes('Synth√®se Strat√©gique Globale')) {
        const idx = content.indexOf('Synth√®se Strat√©gique Globale');
        console.log('  üîç "Synth√®se Strat√©gique Globale" trouv√© √† la position', idx);
        console.log('  üîç Contexte:', content.substring(idx - 10, idx + 100));
      }
    }
    
    // Test Quick Wins avec le format exact du JSON
    const quickWinsPattern = /### Quick Wins \(Actions Imm√©diates[^)]*\)([\s\S]*?)(?=---\n|### Actions Strat√©giques|$)/i;
    const quickWinsSection = content.match(quickWinsPattern);
    if (quickWinsSection) {
      console.log('  ‚ö° Section Quick Wins trouv√©e');
      const qwContent = quickWinsSection[1];
      
      const numberedPoints = qwContent.match(/\d+\.\s+\*\*([^*]+)\*\*/g);
      if (numberedPoints) {
        console.log('  ‚ö° Quick Wins:', numberedPoints.length + ' trouv√©(s)');
        numberedPoints.forEach((point, idx) => {
          const cleanPoint = point.replace(/\d+\.\s+\*\*([^*]+)\*\*/, '$1').trim();
          console.log(`     ${idx + 1}. ${cleanPoint}`);
        });
      } else {
        console.log('  ‚ö° Quick Wins: Format des points non reconnu');
      }
    } else {
      console.log('  ‚ö° Quick Wins: Section non trouv√©e');
      // Debug
      if (content.includes('Quick Wins')) {
        const idx = content.indexOf('Quick Wins');
        console.log('  üîç "Quick Wins" trouv√© √† la position', idx);
        console.log('  üîç Contexte:', content.substring(idx - 10, idx + 80));
      }
    }
    
    // Test Actions Strat√©giques avec le format exact
    const actionsPattern = /### Actions Strat√©giques \([^)]*\)([\s\S]*?)(?=---\n|\*\*Conclusion|$)/i;
    const actionsSection = content.match(actionsPattern);
    if (actionsSection) {
      console.log('  üéØ Section Actions Strat√©giques trouv√©e');
      const asContent = actionsSection[1];
      const numberedActions = asContent.match(/\d+\.\s+\*\*([^*]+)\*\*/g);
      if (numberedActions) {
        console.log('  üéØ Actions Strat√©giques:', numberedActions.length + ' trouv√©e(s)');
        numberedActions.forEach((action, idx) => {
          const cleanAction = action.replace(/\d+\.\s+\*\*([^*]+)\*\*/, '$1').trim();
          console.log(`     ${idx + 1}. ${cleanAction}`);
        });
      } else {
        console.log('  üéØ Actions Strat√©giques: Format des points non reconnu');
      }
    } else {
      console.log('  üéØ Actions Strat√©giques: Section non trouv√©e');
    }
    
    // Test Conclusion
    const conclusionMatch = content.match(/\*\*Conclusion\*\*([\s\S]*?)(?=----+|$)/);
    console.log('  üìù Conclusion:', conclusionMatch ? 'Pr√©sente (' + conclusionMatch[1].trim().substring(0, 80) + '...)' : 'Absente');
    
  } else {
    console.log('  ‚ùå Aucune synth√®se strat√©gique trouv√©e');
    
    // Debug: recherche manuelle
    if (section.includes('Synth√®se Strat√©gique')) {
      console.log('  üîç Mais "Synth√®se Strat√©gique" trouv√© dans la section');
      const lines = section.split('\n').slice(0, 10);
      lines.forEach((line, idx) => {
        if (line.includes('Synth√®se')) {
          console.log(`    Ligne ${idx}: ${line.substring(0, 80)}`);
        }
      });
    }
  }
}

console.log('\n‚úÖ Test termin√©'); 